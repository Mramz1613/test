from abc import *
import math
class Figure(ABC):

    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

class Square(Figure):
    def __init__(self,side:int):
        self.side = side

    def area(self)->int:
        return self.side**2

    def perimeter(self)->int:
        return self.side*4

class Circle(Figure):
    def __init__(self,radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius**2

    def perimeter(self):
        return 2*3.14 * self.radius

class Rectangle(Figure):
    def __init__(self,f_side,s_side):
        self.f_side = f_side
        self.s_side = s_side

    def area(self):
        return self.f_side*self.s_side

    def perimeter(self):
        return 2*(self.f_side+self.s_side)


class Triangle(Figure):
    def __init__(self,f_side,s_side,th_side):
        self.f_side = f_side
        self.s_side = s_side
        self.th_side = th_side

    def perimeter(self):
        return self.f_side+self.s_side+self.th_side

    def area(self):
        p = Triangle.perimeter(self)/2
        return math.sqrt(p*(p-self.f_side)*(p-self.s_side)*(p-self.th_side))

tre =Triangle(3,4,5)
print(tre.area())

class Human(ABC):
    def __init__(self,name,age,gender):
        self.name = name
        self.age = age
        self.gender = gender

    @abstractmethod
    def say(self):
        pass

    @abstractmethod
    def info_about_profession(self):
        pass

class President(Human):
    def __init__(self, name, age, gender,education):
        super().__init__(name, age, gender)
        self.education = education

    def say(self):
        print(f"{self.name} —Å–∫–∞–∑–∞–ª '–í–≤–æ–∂—É –Ω–∞–ª–æ–≥ –Ω–∞ –≤–æ–∑–¥—É—Ö'")

    def info_about_profession(self):
        print(f"–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –∑–∞–Ω–∏–º–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—è—â—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å—Ç—Ä–∞–Ω–µ, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç –∑–∞–∫–æ–Ω—ã, –∏–º–µ–µ—Ç {self.education}")

class Driver(Human):
    def __init__(self, name, age, gender,car):
        super().__init__(name, age, gender)
        self.car = car
    def say(self):
        print(f"{self.name} –°–∫–∞–∑–∞–ª '–î–æ —Ü–µ–Ω—Ç—Ä–∞ 500 —Ä—É–±–ª–µ–π'")

    def info_about_profession(self):
        print(f"–†–∞–∑–≤–æ–∑–∏—Ç –ª—é–¥–µ–π –Ω–∞ –º–∞—à–∏–Ω–µ {self.car}")

class Cook(Human):
    def __init__(self, name, age, gender,knife):
        super().__init__(name, age, gender)
        self.knife = knife

    def say(self):
        print(f"{self.name} –°–∫–∞–∑–∞–ª '–Ø –Ω–µ –±—É–¥—É —ç—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç—å'")

    def info_about_profession(self):
        print(f"–ì–æ—Ç–æ–≤–∏—Ç –µ–¥—É –∏—Å–ø–æ–ª—å–∑—É—è {self.knife}")


vova = President("–í–æ–≤–∞",66,"–º","–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
vova.say()
vova.info_about_profession()
drive = Driver("–í–∞—Å—è",30,'–º',"Toyota")
drive.say()
drive.info_about_profession()
ya = Cook("–í–∞–Ω—è",23,"–º","–Ø–ø–æ–Ω—Å–∫–∏–π –Ω–æ–∂")
ya.say()
ya.info_about_profession()

class Fraction:
    def __init__(self,a:int,b:int):
        if isinstance(a,int) is False or isinstance(a,int) is False:
            raise ValueError("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
        self.a = a
        self.b = b
        if self.b == 0:
            self.b = int(input("–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é"))

    def mul (self, other):
        return Fraction(self.a*other.a,self.b*other.b)

    def __mul__(self, other):
        return Fraction(self.a * other.a, self.b * other.b)

    def dev (self,other):
        return Fraction(self.a*other.b,self.b*other.a)

    def __truediv__(self, other):
        return Fraction(self.a * other.b, self.b * other.a)

    def display(self):
        print(f"{self.a}/{self.b}")

    def summ(self,other):
        if self.b == other.b:
            return Fraction(self.a+other.a,self.b)
        else:
            return Fraction(self.a*other.b+other.a*self.b)

    def __eq__(self, other):
        return self.a / self.b == other.a / other.b

    def __ne__(self, other):
        return not (self.a / self.b == other.a / other.b)
f = Fraction(1,4)
s = Fraction(1,2)
print(f != s)
"""–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏"""
my_file = open("text.txt","w",encoding="utf-8")  #–µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π
my_file.write("–ø—Ä–∏–≤–µ—Çü§¢üçå")
my_file.close()
with open("text.jpeg","x", encoding="utf-8") as my_file:
    pass